(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{109:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return c})),a.d(t,"metadata",(function(){return l})),a.d(t,"rightToc",(function(){return i})),a.d(t,"default",(function(){return d}));var n=a(2),b=a(6),r=(a(0),a(132)),c={id:"api-core",title:"Core",sidebar_label:"Core"},l={id:"api-core",title:"Core",description:"NPM | GitHub",source:"@site/docs/api-core.md",permalink:"/docs/api-core",editUrl:"https://github.com/civet-org/civet-org.github.io/edit/source/docs/api-core.md",sidebar_label:"Core",sidebar:"docs",previous:{title:"Introduction",permalink:"/docs/api"},next:{title:"Events",permalink:"/docs/api-events"}},i=[{value:"<code>&lt;ConfigProvider&gt;</code>",id:"configprovider",children:[{value:"Props",id:"props",children:[]},{value:"Context",id:"context",children:[]},{value:"Related",id:"related",children:[]}]},{value:"<code>&lt;ConfigConsumer&gt;</code>",id:"configconsumer",children:[]},{value:"<code>useConfigContext</code>",id:"useconfigcontext",children:[{value:"Function arguments",id:"function-arguments",children:[]},{value:"Return type",id:"return-type",children:[]}]},{value:"<code>&lt;Resource&gt;</code>",id:"resource",children:[{value:"Props",id:"props-1",children:[]},{value:"Context",id:"context-1",children:[]},{value:"Related",id:"related-1",children:[]}]},{value:"<code>&lt;ResourceProvider&gt;</code>",id:"resourceprovider",children:[{value:"Props",id:"props-2",children:[]},{value:"Context",id:"context-2",children:[]},{value:"Related",id:"related-2",children:[]}]},{value:"<code>&lt;ResourceConsumer&gt;</code>",id:"resourceconsumer",children:[]},{value:"<code>useResourceContext</code>",id:"useresourcecontext",children:[{value:"Function arguments",id:"function-arguments-1",children:[]},{value:"Return type",id:"return-type-1",children:[]}]},{value:"<code>BaseDataStore</code>",id:"basedatastore",children:[{value:"Class members",id:"class-members",children:[]},{value:"Abstract members",id:"abstract-members",children:[]},{value:"Caveats",id:"caveats",children:[]}]},{value:"<code>DataStore</code>",id:"datastore",children:[{value:"Class members",id:"class-members-1",children:[]},{value:"Caveats",id:"caveats-1",children:[]}]},{value:"<code>isDataStore</code>",id:"isdatastore",children:[{value:"Function arguments",id:"function-arguments-2",children:[]},{value:"Return type",id:"return-type-2",children:[]}]},{value:"<code>dataStorePropType</code>",id:"datastoreproptype",children:[]},{value:"<code>AbortSignal</code>",id:"abortsignal",children:[{value:"Class members",id:"class-members-2",children:[]}]},{value:"<code>Meta</code>",id:"meta",children:[{value:"Constructor",id:"constructor",children:[]},{value:"Class members",id:"class-members-3",children:[]}]},{value:"<code>createPlugin</code>",id:"createplugin",children:[{value:"Function arguments",id:"function-arguments-3",children:[]},{value:"Return type",id:"return-type-3",children:[]},{value:"Caveats",id:"caveats-2",children:[]}]}],o={rightToc:i};function d(e){var t=e.components,a=Object(b.a)(e,["components"]);return Object(r.b)("wrapper",Object(n.a)({},o,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://npmjs.com/package/@civet/core"}),"NPM")," | ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/civet-org/core"}),"GitHub")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"npm install @civet/core\n")),Object(r.b)("p",null,"The core module provides civet's base functionality."),Object(r.b)("h2",{id:"configprovider"},Object(r.b)("inlineCode",{parentName:"h2"},"<ConfigProvider>")),Object(r.b)("p",null,"Provides general configuration for core components to its descendants using React's context API."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsx"}),"<ConfigProvider dataStore={store}>...</ConfigProvider>\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'import { ConfigProvider } from "@civet/core";\n')),Object(r.b)("h3",{id:"props"},"Props"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"dataStore"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("a",Object(n.a)({parentName:"td"},{href:"#datastore"}),Object(r.b)("inlineCode",{parentName:"a"},"DataStore"))),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}))))),Object(r.b)("h3",{id:"context"},"Context"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"dataStore"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("a",Object(n.a)({parentName:"td"},{href:"#datastore"}),Object(r.b)("inlineCode",{parentName:"a"},"DataStore"))),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}))))),Object(r.b)("h3",{id:"related"},"Related"),Object(r.b)("p",null,Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#configconsumer"}),Object(r.b)("inlineCode",{parentName:"a"},"<ConfigConsumer>")),", ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#resource"}),Object(r.b)("inlineCode",{parentName:"a"},"<Resource>")),", ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#useconfigcontext"}),Object(r.b)("inlineCode",{parentName:"a"},"useConfigContext"))),Object(r.b)("h2",{id:"configconsumer"},Object(r.b)("inlineCode",{parentName:"h2"},"<ConfigConsumer>")),Object(r.b)("p",null,"Context consumer for ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#configprovider"}),Object(r.b)("inlineCode",{parentName:"a"},"<ConfigProvider>")),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsx"}),"<ConfigConsumer>\n  {(context) => ...}\n</ConfigConsumer>\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'import { ConfigConsumer } from "@civet/core";\n')),Object(r.b)("h2",{id:"useconfigcontext"},Object(r.b)("inlineCode",{parentName:"h2"},"useConfigContext")),Object(r.b)("p",null,"Context hook for ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#configprovider"}),Object(r.b)("inlineCode",{parentName:"a"},"<ConfigProvider>")),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const configContext = useConfigContext();\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'import { useConfigContext } from "@civet/core";\n')),Object(r.b)("h3",{id:"function-arguments"},"Function arguments"),Object(r.b)("p",null,"None"),Object(r.b)("h3",{id:"return-type"},"Return type"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"object")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("a",Object(n.a)({parentName:"td"},{href:"#configprovider"}),"Config context"))))),Object(r.b)("h2",{id:"resource"},Object(r.b)("inlineCode",{parentName:"h2"},"<Resource>")),Object(r.b)("p",null,"Makes data from an ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#datastore"}),Object(r.b)("inlineCode",{parentName:"a"},"DataStore"))," available to its descendants using a ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#resourceprovider"}),Object(r.b)("inlineCode",{parentName:"a"},"<ResourceProvider>")),"."),Object(r.b)("p",null,"Necessary configuration that is not directly specified is taken from the nearest ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#configprovider"}),Object(r.b)("inlineCode",{parentName:"a"},"<ConfigProvider>")),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsx"}),'<Resource name="persons" query={{ city: "New York" }}>\n  ...\n</Resource>\n')),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'import { Resource } from "@civet/core";\n')),Object(r.b)("h3",{id:"props-1"},"Props"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"name"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"string")," ",Object(r.b)("strong",{parentName:"td"},"(required)")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Resource name")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"ids"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"any[]")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"IDs to be queried (in place of ",Object(r.b)("inlineCode",{parentName:"td"},"query"),")")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"query"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"any")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Query filter (in place of ",Object(r.b)("inlineCode",{parentName:"td"},"ids"),")")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"empty"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"boolean")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Whether to prevent fetching data")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"options"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"object")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("a",Object(n.a)({parentName:"td"},{href:"#datastore"}),Object(r.b)("inlineCode",{parentName:"a"},"DataStore"))," options for requests")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"dataStore"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("a",Object(n.a)({parentName:"td"},{href:"#datastore"}),Object(r.b)("inlineCode",{parentName:"a"},"DataStore"))),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("a",Object(n.a)({parentName:"td"},{href:"#datastore"}),Object(r.b)("inlineCode",{parentName:"a"},"DataStore"))," to be used for requests")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"persistent"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"boolean")," ","|"," ",Object(r.b)("inlineCode",{parentName:"td"},'"very"')),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Whether stale data should be retained during the next request - this only applies if neither ",Object(r.b)("inlineCode",{parentName:"td"},"dataStore")," nor ",Object(r.b)("inlineCode",{parentName:"td"},"name")," have changed, unless set to ",Object(r.b)("inlineCode",{parentName:"td"},'"very"'))))),Object(r.b)("h3",{id:"context-1"},"Context"),Object(r.b)("p",null,"See ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#resourceprovider"}),Object(r.b)("inlineCode",{parentName:"a"},"<ResourceProvider>"))),Object(r.b)("h3",{id:"related-1"},"Related"),Object(r.b)("p",null,Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#resourceprovider"}),Object(r.b)("inlineCode",{parentName:"a"},"<ResourceProvider>")),", ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#resourceconsumer"}),Object(r.b)("inlineCode",{parentName:"a"},"<ResourceConsumer>")),", ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#useresourcecontext"}),Object(r.b)("inlineCode",{parentName:"a"},"useResourceContext"))),Object(r.b)("h2",{id:"resourceprovider"},Object(r.b)("inlineCode",{parentName:"h2"},"<ResourceProvider>")),Object(r.b)("p",null,"Provides resource context to its descendants using React's context API."),Object(r.b)("p",null,"In most cases you should use ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#resource"}),Object(r.b)("inlineCode",{parentName:"a"},"<Resource>"))," instead."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsx"}),"<ResourceProvider value={resourceContext}>...</ResourceProvider>\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'import { ResourceProvider } from "@civet/core";\n')),Object(r.b)("h3",{id:"props-2"},"Props"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"value"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"object")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Resource context")))),Object(r.b)("h3",{id:"context-2"},"Context"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"name"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"string")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Resource name")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"ids"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"any[]")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Queried IDs")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"query"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"any")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Query filter")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"options"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"object")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("a",Object(n.a)({parentName:"td"},{href:"#datastore"}),Object(r.b)("inlineCode",{parentName:"a"},"DataStore"))," options used for the request")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"dataStore"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("a",Object(n.a)({parentName:"td"},{href:"#datastore"}),Object(r.b)("inlineCode",{parentName:"a"},"DataStore"))),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("a",Object(n.a)({parentName:"td"},{href:"#datastore"}),Object(r.b)("inlineCode",{parentName:"a"},"DataStore"))," to be used for requests")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"request"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"string")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Unique identifier for the current request")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"data"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"any[]")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The actual data")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"meta"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"object")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Metadata")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"error"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"Error")," ","|"," ",Object(r.b)("inlineCode",{parentName:"td"},"boolean")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Error information about the most recent request, or ",Object(r.b)("inlineCode",{parentName:"td"},"true")," if no further information is available")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"isEmpty"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"boolean")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Whether fetching data is prevented")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"isLoading"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"boolean")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Whether another query is currently being executed")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"isStale"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"boolean")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Whether the current data is stale")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"notify"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"() => void")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Callback to reload the current request")))),Object(r.b)("h3",{id:"related-2"},"Related"),Object(r.b)("p",null,Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#resource"}),Object(r.b)("inlineCode",{parentName:"a"},"<Resource>")),", ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#configconsumer"}),Object(r.b)("inlineCode",{parentName:"a"},"<ResourceConsumer>")),", ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#useresourcecontext"}),Object(r.b)("inlineCode",{parentName:"a"},"useResourceContext"))),Object(r.b)("h2",{id:"resourceconsumer"},Object(r.b)("inlineCode",{parentName:"h2"},"<ResourceConsumer>")),Object(r.b)("p",null,"Context consumer for ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#resourceprovider"}),Object(r.b)("inlineCode",{parentName:"a"},"<ResourceProvider>")),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsx"}),"<ResourceConsumer>\n  {(context) => ...}\n</ResourceConsumer>\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'import { ResourceConsumer } from "@civet/core";\n')),Object(r.b)("h2",{id:"useresourcecontext"},Object(r.b)("inlineCode",{parentName:"h2"},"useResourceContext")),Object(r.b)("p",null,"Context hook for ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#resourceprovider"}),Object(r.b)("inlineCode",{parentName:"a"},"<ResourceProvider>")),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const resourceContext = useResourceContext();\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'import { useResourceContext } from "@civet/core";\n')),Object(r.b)("h3",{id:"function-arguments-1"},"Function arguments"),Object(r.b)("p",null,"None"),Object(r.b)("h3",{id:"return-type-1"},"Return type"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"object")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("a",Object(n.a)({parentName:"td"},{href:"#resourceprovider"}),"Resource context"))))),Object(r.b)("h2",{id:"basedatastore"},Object(r.b)("inlineCode",{parentName:"h2"},"BaseDataStore")),Object(r.b)("p",null,"DataStore base class."),Object(r.b)("p",null,"When implementing your own DataStore, usually you would prefer ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#datastore"}),Object(r.b)("inlineCode",{parentName:"a"},"DataStore"))," over this class, as it already provides some general implementations."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'import { BaseDataStore } from "@civet/core";\n')),Object(r.b)("h3",{id:"class-members"},"Class members"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Arguments"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Return Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"subscribe"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"resourceName: ",Object(r.b)("inlineCode",{parentName:"td"},"string"),", handler: ",Object(r.b)("inlineCode",{parentName:"td"},"() => void")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"unsubscribe: ",Object(r.b)("inlineCode",{parentName:"td"},"() => void")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Subscribe to data change notifications")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"notify"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"resourceName: ",Object(r.b)("inlineCode",{parentName:"td"},"string")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"void")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Notify data changes")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"get"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"resourceName: ",Object(r.b)("inlineCode",{parentName:"td"},"string"),", ids: ",Object(r.b)("inlineCode",{parentName:"td"},"any[]"),", query: ",Object(r.b)("inlineCode",{parentName:"td"},"any"),", options: ",Object(r.b)("inlineCode",{parentName:"td"},"object"),", meta: ",Object(r.b)("inlineCode",{parentName:"td"},"object")," ","|"," ",Object(r.b)("a",Object(n.a)({parentName:"td"},{href:"#meta"}),Object(r.b)("inlineCode",{parentName:"a"},"Meta"))),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"Promise<any[]>")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Get data (at once ","|"," uses ",Object(r.b)("inlineCode",{parentName:"td"},"handleGet")," internally)")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"continuousGet"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"resourceName: ",Object(r.b)("inlineCode",{parentName:"td"},"string"),", ids: ",Object(r.b)("inlineCode",{parentName:"td"},"any[]"),", query: ",Object(r.b)("inlineCode",{parentName:"td"},"any"),", options: ",Object(r.b)("inlineCode",{parentName:"td"},"object"),", meta: ",Object(r.b)("inlineCode",{parentName:"td"},"object")," ","|"," ",Object(r.b)("a",Object(n.a)({parentName:"td"},{href:"#meta"}),Object(r.b)("inlineCode",{parentName:"a"},"Meta")),", callback: ",Object(r.b)("inlineCode",{parentName:"td"},"(error: any, complete: boolean, data: any[]) => void"),", abortSignal: ",Object(r.b)("a",Object(n.a)({parentName:"td"},{href:"#abortsignal"}),Object(r.b)("inlineCode",{parentName:"a"},"AbortSignal"))),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"void")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Get data (continuously ","|"," uses ",Object(r.b)("inlineCode",{parentName:"td"},"handleGet")," internally)")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"create"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"resourceName: ",Object(r.b)("inlineCode",{parentName:"td"},"string"),", data: ",Object(r.b)("inlineCode",{parentName:"td"},"any"),", options: ",Object(r.b)("inlineCode",{parentName:"td"},"object"),", meta: ",Object(r.b)("inlineCode",{parentName:"td"},"object")," ","|"," ",Object(r.b)("a",Object(n.a)({parentName:"td"},{href:"#meta"}),Object(r.b)("inlineCode",{parentName:"a"},"Meta"))),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"Promise<void>")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Create data (uses ",Object(r.b)("inlineCode",{parentName:"td"},"handleCreate")," internally)")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"update"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"resourceName: ",Object(r.b)("inlineCode",{parentName:"td"},"string"),", ids: ",Object(r.b)("inlineCode",{parentName:"td"},"any[]"),", query: ",Object(r.b)("inlineCode",{parentName:"td"},"any"),", data: ",Object(r.b)("inlineCode",{parentName:"td"},"any"),", options: ",Object(r.b)("inlineCode",{parentName:"td"},"object"),", meta: ",Object(r.b)("inlineCode",{parentName:"td"},"object")," ","|"," ",Object(r.b)("a",Object(n.a)({parentName:"td"},{href:"#meta"}),Object(r.b)("inlineCode",{parentName:"a"},"Meta"))),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"Promise<void>")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Update data (uses ",Object(r.b)("inlineCode",{parentName:"td"},"handleUpdate")," internally)")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"patch"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"resourceName: ",Object(r.b)("inlineCode",{parentName:"td"},"string"),", ids: ",Object(r.b)("inlineCode",{parentName:"td"},"any[]"),", query: ",Object(r.b)("inlineCode",{parentName:"td"},"any"),", data: ",Object(r.b)("inlineCode",{parentName:"td"},"any"),", options: ",Object(r.b)("inlineCode",{parentName:"td"},"object"),", meta: ",Object(r.b)("inlineCode",{parentName:"td"},"object")," ","|"," ",Object(r.b)("a",Object(n.a)({parentName:"td"},{href:"#meta"}),Object(r.b)("inlineCode",{parentName:"a"},"Meta"))),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"Promise<void>")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Patch data (uses ",Object(r.b)("inlineCode",{parentName:"td"},"handlePatch")," internally)")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"remove"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"resourceName: ",Object(r.b)("inlineCode",{parentName:"td"},"string"),", ids: ",Object(r.b)("inlineCode",{parentName:"td"},"any[]"),", query: ",Object(r.b)("inlineCode",{parentName:"td"},"any"),", options: ",Object(r.b)("inlineCode",{parentName:"td"},"object"),", meta: ",Object(r.b)("inlineCode",{parentName:"td"},"object")," ","|"," ",Object(r.b)("a",Object(n.a)({parentName:"td"},{href:"#meta"}),Object(r.b)("inlineCode",{parentName:"a"},"Meta"))),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"Promise<void>")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Remove data (uses ",Object(r.b)("inlineCode",{parentName:"td"},"handleRemove")," internally)")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"transition"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"nextData: ",Object(r.b)("inlineCode",{parentName:"td"},"any[]"),", prevData: ",Object(r.b)("inlineCode",{parentName:"td"},"any[]"),", context: ",Object(r.b)("inlineCode",{parentName:"td"},"object"),", prevContext: ",Object(r.b)("inlineCode",{parentName:"td"},"object")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"any[]")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Transition between the previous and current ",Object(r.b)("inlineCode",{parentName:"td"},"data")," array (see caveats for more details)")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"recycleItems"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"nextData: ",Object(r.b)("inlineCode",{parentName:"td"},"any[]"),", prevData: ",Object(r.b)("inlineCode",{parentName:"td"},"any[]"),", context: ",Object(r.b)("inlineCode",{parentName:"td"},"object"),", prevContext: ",Object(r.b)("inlineCode",{parentName:"td"},"object")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"any[]")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Recycle unchanged items to prevent unneeded rerenders (see caveats of ",Object(r.b)("a",Object(n.a)({parentName:"td"},{href:"#datastore"}),Object(r.b)("inlineCode",{parentName:"a"},"DataStore"))," for more details)")))),Object(r.b)("h3",{id:"abstract-members"},"Abstract members"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Arguments"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Return Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"handleGet"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"resourceName: ",Object(r.b)("inlineCode",{parentName:"td"},"string"),", ids: ",Object(r.b)("inlineCode",{parentName:"td"},"any[]"),", query: ",Object(r.b)("inlineCode",{parentName:"td"},"any"),", options: ",Object(r.b)("inlineCode",{parentName:"td"},"object"),", meta: ",Object(r.b)("a",Object(n.a)({parentName:"td"},{href:"#meta"}),Object(r.b)("inlineCode",{parentName:"a"},"Meta"))),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"any[]")," ","|"," ",Object(r.b)("inlineCode",{parentName:"td"},"Promise<any[]>")," ","|"," ",Object(r.b)("inlineCode",{parentName:"td"},"(callback: (error: any, complete: boolean, data: any[]) => void, abortSignal: AbortSignal) => void")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"A callback function can be returned to support continuous gets (see caveats for more details)")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"handleCreate"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"resourceName: ",Object(r.b)("inlineCode",{parentName:"td"},"string"),", data: ",Object(r.b)("inlineCode",{parentName:"td"},"any"),", options: ",Object(r.b)("inlineCode",{parentName:"td"},"object"),", meta: ",Object(r.b)("a",Object(n.a)({parentName:"td"},{href:"#meta"}),Object(r.b)("inlineCode",{parentName:"a"},"Meta"))),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"void")," ","|"," ",Object(r.b)("inlineCode",{parentName:"td"},"Promise<void>")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"handleUpdate"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"resourceName: ",Object(r.b)("inlineCode",{parentName:"td"},"string"),", ids: ",Object(r.b)("inlineCode",{parentName:"td"},"any[]"),", query: ",Object(r.b)("inlineCode",{parentName:"td"},"any"),", data: ",Object(r.b)("inlineCode",{parentName:"td"},"any"),", options: ",Object(r.b)("inlineCode",{parentName:"td"},"object"),", meta: ",Object(r.b)("a",Object(n.a)({parentName:"td"},{href:"#meta"}),Object(r.b)("inlineCode",{parentName:"a"},"Meta"))),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"void")," ","|"," ",Object(r.b)("inlineCode",{parentName:"td"},"Promise<void>")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"handlePatch"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"resourceName: ",Object(r.b)("inlineCode",{parentName:"td"},"string"),", ids: ",Object(r.b)("inlineCode",{parentName:"td"},"any[]"),", query: ",Object(r.b)("inlineCode",{parentName:"td"},"any"),", data: ",Object(r.b)("inlineCode",{parentName:"td"},"any"),", options: ",Object(r.b)("inlineCode",{parentName:"td"},"object"),", meta: ",Object(r.b)("a",Object(n.a)({parentName:"td"},{href:"#meta"}),Object(r.b)("inlineCode",{parentName:"a"},"Meta"))),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"void")," ","|"," ",Object(r.b)("inlineCode",{parentName:"td"},"Promise<void>")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"handleRemove"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"resourceName: ",Object(r.b)("inlineCode",{parentName:"td"},"string"),", ids: ",Object(r.b)("inlineCode",{parentName:"td"},"any[]"),", query: ",Object(r.b)("inlineCode",{parentName:"td"},"any"),", options: ",Object(r.b)("inlineCode",{parentName:"td"},"object"),", meta: ",Object(r.b)("a",Object(n.a)({parentName:"td"},{href:"#meta"}),Object(r.b)("inlineCode",{parentName:"a"},"Meta"))),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"void")," ","|"," ",Object(r.b)("inlineCode",{parentName:"td"},"Promise<void>")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}))))),Object(r.b)("h3",{id:"caveats"},"Caveats"),Object(r.b)("h4",{id:"abstract-functions"},"Abstract functions"),Object(r.b)("p",null,"The functions ",Object(r.b)("inlineCode",{parentName:"p"},"get"),", ",Object(r.b)("inlineCode",{parentName:"p"},"create"),", ... internally invoke their corresponding abstract counterparts ",Object(r.b)("inlineCode",{parentName:"p"},"handle...")," and perform generic validation on their parameters and return values. Therefore, you should not just override them, but implement the abstract ",Object(r.b)("inlineCode",{parentName:"p"},"handle...")," methods instead."),Object(r.b)("h4",{id:"continuousget--transitioning"},"continuousGet & transitioning"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"dataStore.get")," resolves when the complete data is collected.\nThis is fine when resolving the data is really fast but can be troublesome when you want to load large data sets e.g. from a backend over a slow internet connection.\nYou can implement your DataStore to support continuous data fetching by returning a callback function from ",Object(r.b)("inlineCode",{parentName:"p"},"handleGet")," rather than the data itself.\nThis allows you to forward partial data to the Resource component (or other compatible clients) even if the fetch has not yet been completed."),Object(r.b)("p",null,"It can be helpful to allow a transition between several updates of the component, e.g. to keep the order of the elements while the retrieval is still running.\nThe ",Object(r.b)("inlineCode",{parentName:"p"},"Resource")," component supports this by calling the ",Object(r.b)("inlineCode",{parentName:"p"},"DataStore"),"'s ",Object(r.b)("inlineCode",{parentName:"p"},"transition")," method each time it resolves new data. The function is called before ",Object(r.b)("inlineCode",{parentName:"p"},"recycleItems"),", so you don't have to worry about it when implementing the transition."),Object(r.b)("h2",{id:"datastore"},Object(r.b)("inlineCode",{parentName:"h2"},"DataStore")),Object(r.b)("p",null,"Default DataStore implementation (based on ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#basedatastore"}),Object(r.b)("inlineCode",{parentName:"a"},"BaseDataStore")),")."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"class CustomStore extends DataStore {\n  handleGet(resource, ids, query, options, meta) {\n    return ...;\n  }\n}\n\nconst store = new CustomStore();\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'import { DataStore } from "@civet/core";\n')),Object(r.b)("h3",{id:"class-members-1"},"Class members"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Arguments"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Return Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"recycleItemsCompareIdentity"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"nextItem: ",Object(r.b)("inlineCode",{parentName:"td"},"any"),", prevItem: ",Object(r.b)("inlineCode",{parentName:"td"},"any")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"boolean")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Return ",Object(r.b)("inlineCode",{parentName:"td"},"true")," if ",Object(r.b)("inlineCode",{parentName:"td"},"nextItem")," and ",Object(r.b)("inlineCode",{parentName:"td"},"prevItem")," reference the same item. (You can do so by comparing IDs or similar if available)")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"recycleItemsIsUnchanged"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"nextItem: ",Object(r.b)("inlineCode",{parentName:"td"},"any"),", prevItem: ",Object(r.b)("inlineCode",{parentName:"td"},"any")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"boolean")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Return ",Object(r.b)("inlineCode",{parentName:"td"},"true")," if the item was not changed at all, e.g. both versions are completely equal. (You can do so by comparing ETags or similar if available)")))),Object(r.b)("h3",{id:"caveats-1"},"Caveats"),Object(r.b)("h4",{id:"recycleitems"},"recycleItems"),Object(r.b)("p",null,"React offers tools to avoid unnecessary component updates, including ",Object(r.b)("inlineCode",{parentName:"p"},"React.Component.shouldComponentUpdate"),", ",Object(r.b)("inlineCode",{parentName:"p"},"React.PureComponent")," and ",Object(r.b)("inlineCode",{parentName:"p"},"React.memo"),".\nThese tools check whether the props of a component have changed since the previous render to determine if the component needs to be updated again.\nThe fastest way to do this would be to use JavaScript's identity operator ",Object(r.b)("inlineCode",{parentName:"p"},"==="),".\nThis operator works great for primitives like strings or numbers, but doesn't work like we would expect it to with objects and arrays.\nThis is because objects and arrays (which in fact are objects as well) are compared by their memory addresses instead of their contents. See the example below:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const a = { x: 1 };\nconst b = { x: 1 };\nconst c = a;\na === b; // -> false: not the same memory address\na === c; // -> true: same memory address\n")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"recycleItems")," attempts to fix this issue.\nIt is internally called by the ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#resource"}),Object(r.b)("inlineCode",{parentName:"a"},"<Resource>"))," component after each fetch.\nThe function compares the previous items with the next ones and attempts to reapply all unchanged items from the previous array to the new one.\nAs a result, the following checks should succeed:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"array equality",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"if one or more items differ (compared by value): ",Object(r.b)("inlineCode",{parentName:"li"},"prevData !== nextData")),Object(r.b)("li",{parentName:"ul"},"if items were added or removed: ",Object(r.b)("inlineCode",{parentName:"li"},"prevData !== nextData")),Object(r.b)("li",{parentName:"ul"},"if the order of the arrays differs: ",Object(r.b)("inlineCode",{parentName:"li"},"prevData !== nextData")),Object(r.b)("li",{parentName:"ul"},"else: ",Object(r.b)("inlineCode",{parentName:"li"},"prevData === nextData")))),Object(r.b)("li",{parentName:"ul"},"item equality",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"if an item differs (compared by value): ",Object(r.b)("inlineCode",{parentName:"li"},"prevItem !== nextItem")),Object(r.b)("li",{parentName:"ul"},"else (even if it was reordered in the array): ",Object(r.b)("inlineCode",{parentName:"li"},"prevItem === nextItem"))))),Object(r.b)("p",null,"However, the default implementation may be expensive in regard to performance as it deeply compares each item by value.\nThis is why, if possible, you should improve it with a faster comparing approach by overriding the methods ",Object(r.b)("inlineCode",{parentName:"p"},"recycleItemsCompareIdentity")," and ",Object(r.b)("inlineCode",{parentName:"p"},"recycleItemsIsUnchanged"),". You can also completely ditch the default implementation by implementing your own version of ",Object(r.b)("inlineCode",{parentName:"p"},"recycleItems"),"."),Object(r.b)("h2",{id:"isdatastore"},Object(r.b)("inlineCode",{parentName:"h2"},"isDataStore")),Object(r.b)("p",null,"Identifies ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#datastore"}),Object(r.b)("inlineCode",{parentName:"a"},"DataStore"))," instances."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'const ds = new DataStore();\n\nif (!isDataStore(ds)) {\n  throw new Error("Should be a DataStore instance");\n}\n')),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'import { isDataStore } from "@civet/core";\n')),Object(r.b)("h3",{id:"function-arguments-2"},"Function arguments"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"dataStore"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"any")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The object to be checked")))),Object(r.b)("h3",{id:"return-type-2"},"Return type"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"boolean")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Whether ",Object(r.b)("inlineCode",{parentName:"td"},"dataStore")," is an instance of ",Object(r.b)("a",Object(n.a)({parentName:"td"},{href:"#datastore"}),Object(r.b)("inlineCode",{parentName:"a"},"DataStore")))))),Object(r.b)("h2",{id:"datastoreproptype"},Object(r.b)("inlineCode",{parentName:"h2"},"dataStorePropType")),Object(r.b)("p",null,"PropType for ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#datastore"}),Object(r.b)("inlineCode",{parentName:"a"},"DataStore"))," instances."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const propTypes = {\n  optional: dataStorePropType,\n  required: dataStorePropType.isRequired,\n};\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'import { dataStorePropType } from "@civet/core";\n')),Object(r.b)("h2",{id:"abortsignal"},Object(r.b)("inlineCode",{parentName:"h2"},"AbortSignal")),Object(r.b)("p",null,"Interface for listening for abort requests."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'// Basic usage\nconst signal = new AbortSignal();\nsignal.listen(() => {\n  console.log("Request has been aborted");\n});\nsignal.abort();\nsignal.listen(() => {\n  console.log(\n    "This will be called immediately, as signal has already been aborted"\n  );\n});\n\n// The signal can be locked if it is now longer allowed to be aborted\nconst signal = new AbortSignal();\nsignal.lock();\nsignal.abort(); // No listeners will be notified since the signal is already locked\n')),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'import { AbortSignal } from "@civet/core";\n')),Object(r.b)("h3",{id:"class-members-2"},"Class members"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Arguments"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Return Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"listen"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"listener: ",Object(r.b)("inlineCode",{parentName:"td"},"() => void")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"unsubscribe: ",Object(r.b)("inlineCode",{parentName:"td"},"() => void")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Listen for abort signals")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"abort"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"void")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Abort the signal")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"lock"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"void")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Lock the signal (The signal can no longer be aborted)")))),Object(r.b)("h2",{id:"meta"},Object(r.b)("inlineCode",{parentName:"h2"},"Meta")),Object(r.b)("p",null,"Metadata key value map."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'// Basic usage\nconst meta = new Meta();\nmeta.set("test", 1);\nconst result = meta.commit();\nconsole.log(result.test);\n\n// Meta can be based on an existing object\nconst base = {};\nconst baseMeta = new Meta(base);\nbaseMeta.set("test", 1);\nassert(base.test === baseMeta.get("test"));\n\n// Meta can handle basic immutability\nconst previousMeta = { a: 1 };\nconst unchanged = new Meta({ a: 1 });\nconst changed = new Meta({ a: 2 });\nassert(previousMeta === unchanged.commit(previousMeta));\nassert(previousMeta !== changed.commit(previousMeta));\n')),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'import { Meta } from "@civet/core";\n')),Object(r.b)("h3",{id:"constructor"},"Constructor"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Arguments"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"base: ",Object(r.b)("inlineCode",{parentName:"td"},"object")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"All changes get applied to ",Object(r.b)("inlineCode",{parentName:"td"},"base")," if it is set")))),Object(r.b)("h3",{id:"class-members-3"},"Class members"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Arguments"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Return Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"clear"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"void")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Delete all keys from the object")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"delete"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"key: ",Object(r.b)("inlineCode",{parentName:"td"},"string")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"any")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Delete the specified key from the object - returns the deleted value")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"entries"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"([key: string, value: any])[]")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Get all entries from the object")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"get"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"key: ",Object(r.b)("inlineCode",{parentName:"td"},"string")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"any")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Get the value for the specified key from the object")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"has"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"key: ",Object(r.b)("inlineCode",{parentName:"td"},"string")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"boolean")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Check if the object has a value for the specified key")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"keys"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"string[]")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Get all keys from the object")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"set"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"key: ",Object(r.b)("inlineCode",{parentName:"td"},"string"),", value: ",Object(r.b)("inlineCode",{parentName:"td"},"any")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"void")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Set the value for the specified key")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"values"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"any[]")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Get all values from the object")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"commit"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"prev: ",Object(r.b)("inlineCode",{parentName:"td"},"object")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"object")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Get the object as a plain JavaScript object - returns a copy of the current value, or ",Object(r.b)("inlineCode",{parentName:"td"},"prev")," if it is set and matches the current object by value")))),Object(r.b)("h2",{id:"createplugin"},Object(r.b)("inlineCode",{parentName:"h2"},"createPlugin")),Object(r.b)("p",null,"Creates a plugin from the provided configuration function."),Object(r.b)("p",null,"This allows you to extend DataStores and / or Resource components by custom functionality."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsx"}),'const plugin = createPlugin((Store, extend) => {\n  class ExtendedStore extends Store {\n    addedFunctionality() {\n      return "...";\n    }\n  }\n\n  function ResourcePlugin({ ...props, context, children }) {\n    return (\n      <ReactComponent>\n        {children({ ...context, extendedContext: true })}\n      </ReactComponent>\n    );\n  }\n\n  extend.resource(ResourcePlugin);\n\n  return ExtendedStore;\n});\n\nconst DataStoreWithPlugin = plugin(SomeDataStore);\n')),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'import { createPlugin } from "@civet/core";\n')),Object(r.b)("h3",{id:"function-arguments-3"},"Function arguments"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"pluginDefinition"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"(BaseDataStore, extend: { resource: (ResourcePlugin) => void }) => void")," ","|"," ",Object(r.b)("inlineCode",{parentName:"td"},"ExtendedDataStore")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The plugin definition")))),Object(r.b)("h3",{id:"return-type-3"},"Return type"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"(DataStore) => DataStore")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"A plugin function which creates a modified version of the provided ",Object(r.b)("a",Object(n.a)({parentName:"td"},{href:"#datastore"}),Object(r.b)("inlineCode",{parentName:"a"},"DataStore"))," with the plugin functionality")))),Object(r.b)("h3",{id:"caveats-2"},"Caveats"),Object(r.b)("h4",{id:"independence"},"Independence"),Object(r.b)("p",null,"All plugins should be independent of each other.\nIt should be noted that the order in which the individual plugins are executed is not guaranteed."))}d.isMDXComponent=!0}}]);