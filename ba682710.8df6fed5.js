(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{120:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return p}));var a=n(2),b=n(6),r=(n(0),n(132)),c={id:"api-events",title:"Events",sidebar_label:"Events"},i={id:"api-events",title:"Events",description:"NPM | GitHub",source:"@site/docs/api-events.md",permalink:"/docs/api-events",editUrl:"https://github.com/civet-org/civet-org.github.io/edit/source/docs/api-events.md",sidebar_label:"Events",sidebar:"docs",previous:{title:"Core",permalink:"/docs/api-core"}},l=[{value:"<code>&lt;ConfigProvider&gt;</code>",id:"configprovider",children:[{value:"Props",id:"props",children:[]},{value:"Context",id:"context",children:[]},{value:"Related",id:"related",children:[]}]},{value:"<code>&lt;ConfigConsumer&gt;</code>",id:"configconsumer",children:[]},{value:"<code>useConfigContext</code>",id:"useconfigcontext",children:[]},{value:"<code>&lt;EventHandler&gt;</code>",id:"eventhandler",children:[{value:"Props",id:"props-1",children:[]}]},{value:"<code>composeHandlers</code>",id:"composehandlers",children:[{value:"Function arguments",id:"function-arguments",children:[]},{value:"Return type",id:"return-type",children:[]}]},{value:"<code>EventReceiver</code>",id:"eventreceiver",children:[{value:"Class members",id:"class-members",children:[]},{value:"Abstract members",id:"abstract-members",children:[]},{value:"Caveats",id:"caveats",children:[]}]},{value:"<code>isEventReceiver</code>",id:"iseventreceiver",children:[{value:"Function arguments",id:"function-arguments-1",children:[]},{value:"Return type",id:"return-type-1",children:[]}]},{value:"<code>eventReceiverPropType</code>",id:"eventreceiverproptype",children:[]}],o={rightToc:l};function p(e){var t=e.components,n=Object(b.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},o,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://npmjs.com/package/@civet/events"}),"NPM")," | ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/civet-org/events"}),"GitHub")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"npm install @civet/events\n")),Object(r.b)("p",null,"The events module provides advanced event handling functionality."),Object(r.b)("p",null,"The ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/api-core#datastore"}),Object(r.b)("inlineCode",{parentName:"a"},"DataStore"))," already has basic support for handling events. However, it is limited to updating all subscribers of a specific resource.\nIf you need more advanced event handling, this is the place to go."),Object(r.b)("h2",{id:"configprovider"},Object(r.b)("inlineCode",{parentName:"h2"},"<ConfigProvider>")),Object(r.b)("p",null,"Provides general configuration for event components to its descendants using React's context API."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"<ConfigProvider eventReceiver={receiver}>...</ConfigProvider>\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'import { ConfigProvider } from "@civet/events";\n')),Object(r.b)("h3",{id:"props"},"Props"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Name"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"eventReceiver"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"#eventreceiver"}),Object(r.b)("inlineCode",{parentName:"a"},"EventReceiver"))),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}))))),Object(r.b)("h3",{id:"context"},"Context"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Name"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"eventReceiver"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"#eventreceiver"}),Object(r.b)("inlineCode",{parentName:"a"},"EventReceiver"))),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}))))),Object(r.b)("h3",{id:"related"},"Related"),Object(r.b)("p",null,Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#configconsumer"}),Object(r.b)("inlineCode",{parentName:"a"},"<ConfigConsumer>")),", ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#eventhandler"}),Object(r.b)("inlineCode",{parentName:"a"},"<EventHandler>")),", ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#useconfigcontext"}),Object(r.b)("inlineCode",{parentName:"a"},"useConfigContext"))),Object(r.b)("h2",{id:"configconsumer"},Object(r.b)("inlineCode",{parentName:"h2"},"<ConfigConsumer>")),Object(r.b)("p",null,"Context consumer for ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#configprovider"}),Object(r.b)("inlineCode",{parentName:"a"},"<ConfigProvider>")),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"<ConfigConsumer>\n  {(context) => ...}\n</ConfigConsumer>\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'import { ConfigConsumer } from "@civet/events";\n')),Object(r.b)("h2",{id:"useconfigcontext"},Object(r.b)("inlineCode",{parentName:"h2"},"useConfigContext")),Object(r.b)("p",null,"Context hook for ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#configprovider"}),Object(r.b)("inlineCode",{parentName:"a"},"<ConfigProvider>")),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const configContext = useConfigContext();\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'import { useConfigContext } from "@civet/events";\n')),Object(r.b)("h2",{id:"eventhandler"},Object(r.b)("inlineCode",{parentName:"h2"},"<EventHandler>")),Object(r.b)("p",null,"Subscribes to an ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#eventreceiver"}),Object(r.b)("inlineCode",{parentName:"a"},"EventReceiver"))," to update a ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/api-core#resource"}),Object(r.b)("inlineCode",{parentName:"a"},"<Resource>"))," when events occur."),Object(r.b)("p",null,"Necessary configuration that is not directly specified is taken from the nearest ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#configprovider"}),Object(r.b)("inlineCode",{parentName:"a"},"<ConfigProvider>"))," and ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/api-core#resource"}),Object(r.b)("inlineCode",{parentName:"a"},"<Resource>")),"."),Object(r.b)("p",null,"You can specify which events should lead to an update by either passing ",Object(r.b)("inlineCode",{parentName:"p"},"options")," to the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#eventreceiver"}),Object(r.b)("inlineCode",{parentName:"a"},"EventReceiver"))," or using ",Object(r.b)("inlineCode",{parentName:"p"},"onEvent"),".\n",Object(r.b)("inlineCode",{parentName:"p"},"onEvent")," can also be used to directly access events allowing you to add custom event logic to your components."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),'<EventHandler\n  options={{ some: "options" }}\n  onEvent={(e) => console.log("Received", e)}\n>\n  ...\n</Resource>\n')),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'import { EventHandler } from "@civet/events";\n')),Object(r.b)("h3",{id:"props-1"},"Props"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Name"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"eventReceiver"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"#eventreceiver"}),Object(r.b)("inlineCode",{parentName:"a"},"EventReceiver"))),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"#eventreceiver"}),Object(r.b)("inlineCode",{parentName:"a"},"EventReceiver"))," to be used")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"resource"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"object")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"/docs/api-core#resourceprovider"}),"Resource context")," to be used")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"options"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"object")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"#eventreceiver"}),Object(r.b)("inlineCode",{parentName:"a"},"EventReceiver"))," options")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"onEvent"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"(event: any) => boolean")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Callback to filter events and handle your own event logic - if ",Object(r.b)("inlineCode",{parentName:"td"},"true")," is returned, the event is considered as handled and the resource is not update")))),Object(r.b)("h2",{id:"composehandlers"},Object(r.b)("inlineCode",{parentName:"h2"},"composeHandlers")),Object(r.b)("p",null,"Utility for composing multiple event handlers.\nInvokes each handler from left to right, but stops immediately when a handler returns ",Object(r.b)("inlineCode",{parentName:"p"},"true"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const composedHandler = composeHandlers(\n  (event) => console.log('Received', event),\n  (event) => ...\n);\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'import { composeHandlers } from "@civet/events";\n')),Object(r.b)("h3",{id:"function-arguments"},"Function arguments"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Name"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"...handlers"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"(event: any) => boolean")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Event handlers")))),Object(r.b)("h3",{id:"return-type"},"Return type"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"(event: any) => boolean")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Composed handlers")))),Object(r.b)("h2",{id:"eventreceiver"},Object(r.b)("inlineCode",{parentName:"h2"},"EventReceiver")),Object(r.b)("p",null,"EventReceiver base class."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"class CustomReceiver extends EventReceiver {\n  handleSubscribe(resource, options, handler) {\n    ...\n    const unsubscribe = () => {\n      ...\n    };\n    return unsubscribe;\n  }\n}\n\nconst receiver = new CustomReceiver();\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'import { EventReceiver } from "@civet/events";\n')),Object(r.b)("h3",{id:"class-members"},"Class members"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Name"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Arguments"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Return Type"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"subscribe"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"resource: ",Object(r.b)("inlineCode",{parentName:"td"},"object"),", options: ",Object(r.b)("inlineCode",{parentName:"td"},"object"),", handler: ",Object(r.b)("inlineCode",{parentName:"td"},"(event: any) => void")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"unsubscribe: ",Object(r.b)("inlineCode",{parentName:"td"},"() => void")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Subscribe to events")))),Object(r.b)("h3",{id:"abstract-members"},"Abstract members"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Name"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Arguments"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Return Type"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"handleSubscribe"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"resource: ",Object(r.b)("inlineCode",{parentName:"td"},"object"),", options: ",Object(r.b)("inlineCode",{parentName:"td"},"object"),", handler: ",Object(r.b)("inlineCode",{parentName:"td"},"(event: any) => void")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"unsubscribe: ",Object(r.b)("inlineCode",{parentName:"td"},"() => void")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}))))),Object(r.b)("h3",{id:"caveats"},"Caveats"),Object(r.b)("h4",{id:"abstract-functions"},"Abstract functions"),Object(r.b)("p",null,"The function ",Object(r.b)("inlineCode",{parentName:"p"},"subscribe")," internally invokes its abstract counterpart ",Object(r.b)("inlineCode",{parentName:"p"},"handleSubscribe")," and performs generic validation on its parameters and return value. Therefore, you should not just override it, but implement the abstract ",Object(r.b)("inlineCode",{parentName:"p"},"handleSubscribe")," method instead."),Object(r.b)("h2",{id:"iseventreceiver"},Object(r.b)("inlineCode",{parentName:"h2"},"isEventReceiver")),Object(r.b)("p",null,"Identifies ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#eventreceiver"}),Object(r.b)("inlineCode",{parentName:"a"},"EventReceiver"))," instances."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'const er = new EventReceiver();\n\nif (!isEventReceiver(er)) {\n  throw new Error("Should be a EventReceiver instance");\n}\n')),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'import { isEventReceiver } from "@civet/events";\n')),Object(r.b)("h3",{id:"function-arguments-1"},"Function arguments"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Name"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"eventReceiver"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"any")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"The object to be checked")))),Object(r.b)("h3",{id:"return-type-1"},"Return type"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"boolean")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Whether ",Object(r.b)("inlineCode",{parentName:"td"},"eventReceiver")," is an instance of ",Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"#eventreceiver"}),Object(r.b)("inlineCode",{parentName:"a"},"EventReceiver")))))),Object(r.b)("h2",{id:"eventreceiverproptype"},Object(r.b)("inlineCode",{parentName:"h2"},"eventReceiverPropType")),Object(r.b)("p",null,"PropType for ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#eventreceiver"}),Object(r.b)("inlineCode",{parentName:"a"},"EventReceiver"))," instances."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const propTypes = {\n  optional: eventReceiverPropType,\n  required: eventReceiverPropType.isRequired,\n};\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'import { eventReceiverPropType } from "@civet/events";\n')))}p.isMDXComponent=!0}}]);